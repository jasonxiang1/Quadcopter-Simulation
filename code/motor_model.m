function [F_motor,M_motor,rpm_motor_dot] = motor_model(F,M,motor_rpm,params)

% Input parameters
% 
%   F,M: required force and moment
%
%   motor_rpm: current motor RPM
%
%   params: Quadcopter parameters
%
% Output parameters
%
%   F_motor: Actual thrust generated by Quadcopter's Motors
%
%   M_motor: Actual Moment generated by the Quadcopter's Motors
%
%   rpm_dot: Derivative of the RPM
%
%************ MOTOR MODEL ************************

% Write code here

%use the inverse of the mixing matrix to computer the rotor rotational
%speeds

%define constants for mixing matrix
cT = params.thrust_coefficient;
cQ = params.moment_scale;
dcT = params.arm_length*cT;

%define inverse constants
cT_inv = 1/(4*cT);
cQ_inv = 1/(4*cQ);
dcT_inv = 1/(2*dcT);

%define mixing matrix and its analytical inverse
mixing_mat = [cT cT cT cT ; 0 dcT 0 -dcT ; -dcT 0 dcT 0 ; -cQ cQ -cQ cQ];
inv_mixing_mat = [cT_inv 0 -dcT_inv -cQ_inv ; cT_inv dcT_inv 0 cQ_inv ; cT_inv 0 dcT_inv -cQ_inv ; cT_inv -dcT_inv 0 cQ_inv];

%compute actual force and moments using motor_rpm and forward mixing_mat
force_moments = mixing_mat*(motor_rpm.*motor_rpm);

%break up force_moments vector
F_motor = force_moments(1);
M_motor = force_moments(2:4);

%compute desired motor_rpm from given F and M
w_desired_squared = inv_mixing_mat*[F ; M];

%compute square root of w_desired
w_desired_rpm = sqrt(w_desired_squared);

%threshold w_rpm within min and max according to given params
for i = 1:length(w_desired_rpm)
    if w_desired_rpm(i) > params.rpm_max
        w_desired_rpm(i) = params.rpm_max;
    elseif w_desired_rpm(i) < params.rpm_min
        w_desired_rpm(i) = params.rpm_min;
    end

end

%reverse directions of w2 and w4
w_desired_rpm(2) = -w_desired_rpm(2);
w_desired_rpm(4) = -w_desired_rpm(4);

%compute w_dot from motor_rpm actual and w_desired_rpm
w_dot_1 = params.motor_constant*(w_desired_rpm(1) - motor_rpm(1));
w_dot_2 = params.motor_constant*(w_desired_rpm(2) - motor_rpm(2));
w_dot_3 = params.motor_constant*(w_desired_rpm(3) - motor_rpm(3));
w_dot_4 = params.motor_constant*(w_desired_rpm(4) - motor_rpm(4));

rpm_motor_dot = [w_dot_1 ; w_dot_2 ; w_dot_3 ; w_dot_4];


end
